apiVersion: apps/v1
kind: Deployment
metadata:
  name:  postgres
  namespace: crypto-app
  labels:
    app:  postgres
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app:  postgres
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name:  postgres
        image:  postgres:15.1
        resources:
          requests:
            cpu: 200m
            memory: 200Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: POSTGRES_DB       
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-persistent-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-persistent-storage
        persistentVolumeClaim: 
          claimName: postgres-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
  namespace: crypto-app
  labels:
    app:  pgadmin
spec:
  selector:
    matchLabels:
      app: pgadmin
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name: pgadmin
        image:  dpage/pgadmin4:6.16
        resources:
          requests:
            cpu: 200m
            memory: 200Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: PGADMIN_DEFAULT_EMAIL
        - name: PGADMIN_DEFAULT_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: PGADMIN_DEFAULT_PASSWORD     
        ports:
        - containerPort: 80
---            
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: crypto-app
spec:
  selector:
    app: postgres
  clusterIP: none
  ports:
  - protocol: TCP
    port: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  namespace: crypto-app
spec:
  selector:
    app: pgadmin
  type: NodePort
  ports:
  - name: pgadmin
    protocol: TCP
    port: 80
    targetPort: 80 
    # If you set the `spec.type` field to `NodePort` and you want a specific port number,
    # you can specify a value in the `spec.ports[*].nodePort` field.
    nodePort: 32543
