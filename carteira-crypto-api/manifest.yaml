apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  namespace: crypto-app
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: crypto-app
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: carteira-crypto-cm
  namespace: crypto-app
data:
  POSTGRES_DB: "carteira-cryptos"
  POSTGRES_HOST: "postgres"
  POSTGRES_USER: "postgres" 
  POSTGRES_PASSWORD: "docker"
  POSTGRES_DOCKER_PORT: "5432"
  PGADMIN_DEFAULT_EMAIL: "pgadmin@email.com"
  PGADMIN_DEFAULT_PASSWORD: "senha"
  COTACAO_API_URL: "http://cotacao-crypto-svc-int:5555/"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  postgres
  namespace: crypto-app
  labels:
    app:  postgres
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app:  postgres
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name:  postgres
        image:  postgres:15.1
        resources:
          requests:
            cpu: 200m
            memory: 200Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: POSTGRES_DB       
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-persistent-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-persistent-storage
        persistentVolumeClaim: 
          claimName: postgres-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
  namespace: crypto-app
  labels:
    app:  pgadmin
spec:
  selector:
    matchLabels:
      app: pgadmin
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name: pgadmin
        image:  dpage/pgadmin4:6.16
        resources:
          requests:
            cpu: 200m
            memory: 200Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: PGADMIN_DEFAULT_EMAIL
        - name: PGADMIN_DEFAULT_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: PGADMIN_DEFAULT_PASSWORD     
        ports:
        - containerPort: 80
---            
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: crypto-app
spec:
  selector:
    app: postgres
  clusterIP: None
  ports:
  - protocol: TCP
    port: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  namespace: crypto-app
spec:
  selector:
    app: pgadmin
  type: NodePort
  ports:
  - name: pgadmin
    protocol: TCP
    port: 80
    targetPort: 80 
    # If you set the `spec.type` field to `NodePort` and you want a specific port number,
    # you can specify a value in the `spec.ports[*].nodePort` field.
    nodePort: 32543
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  carteira-crypto-api
  namespace: crypto-app
  labels:
    app:  carteira-crypto-api
spec:
  selector:
    matchLabels:
      app: carteira-crypto-api
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  carteira-crypto-api
    spec:
      containers:
      - name:  carteira-crypto-api
        image:  alexdamiao86/carteira-crypto-api:1.0.6
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 500m
            memory: 800Mi
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        env: 
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: POSTGRES_PASSWORD
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: POSTGRES_HOST
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: POSTGRES_DB
        - name: POSTGRES_DOCKER_PORT
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: POSTGRES_DOCKER_PORT
        - name: COTACAO_API_URL
          valueFrom:
            configMapKeyRef:
              name: carteira-crypto-cm
              key: COTACAO_API_URL
        ports:
        - containerPort:  8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: carteira-crypto-api
  namespace: crypto-app
spec:
  selector:
    app: carteira-crypto-api
  type: NodePort
  ports:
  - name: carteira-crypto-api
    protocol: TCP
    port: 8080
    targetPort: 8080 
    nodePort: 32080
---
apiVersion: v1
kind: Service
metadata:
  name: carteira-crypto-svc-int
  namespace: crypto-app
spec:
  selector:
    app: carteira-crypto-api
  clusterIP: None
  ports:
  - name: carteira-crypto-svc-int
    protocol: TCP
    port: 8080
    targetPort: 8080 
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hpa-carteira-crypto
  namespace: crypto-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: carteira-crypto-api
  minReplicas: 3
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 40
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 40